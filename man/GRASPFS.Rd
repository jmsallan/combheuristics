% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LocalSearchFSFunctions.R
\name{GRASPFS}
\alias{GRASPFS}
\title{A GRASP algorithm for the permutative flowshop}
\usage{
GRASPFS(M, rcl = 4, iter = 100, op = "swap", opt = "HC", ...)
}
\arguments{
\item{M}{A matrix object storing the time to process task j (column) in machine i (row).}

\item{rcl}{the size of the restricted candidate list.}

\item{iter}{number of iterations.}

\item{op}{The neighbourhood operator for the local search heuristic. Presently are implemented \code{swap} (the default) and \code{insertion} neighbourhoods.}

\item{opt}{the local search algorithm to implement. Presently are supported \code{HC} (hill climbing with \link{HCFS}), \code{SA} (simulated annealing with \link{SAFS}) and \code{TS} (tabu search with \link{TSFS}).}
}
\value{
sol The obtained solution.

obj The makespan of the obtained solution.
}
\description{
A greedy randomized adaptive search procedure (GRASP) for the permutative flowshop. At each iteration, it generates a solution based on the Palmer heuristic. Instead of picking the best element, it picks an element randomly among a restricted candidate list, consisting on the first \code{rcl} first elements of the Palmer ordering. Then, this solution is improved with a local search heuristic.
}
\examples{
set.seed(2020)
instance <- matrix(sample(10:90, 100, replace=TRUE), 5, 20)
GRASPFS(M=instance)
}
